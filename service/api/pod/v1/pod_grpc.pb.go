// protoc --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pod/v1/pod.proto

package pod

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EciService_SavePod_FullMethodName              = "/pod.EciService/SavePod"
	EciService_SaveVNode_FullMethodName            = "/pod.EciService/SaveVNode"
	EciService_SendUserNotification_FullMethodName = "/pod.EciService/SendUserNotification"
)

// EciServiceClient is the client API for EciService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EciServiceClient interface {
	SavePod(ctx context.Context, in *EciPod, opts ...grpc.CallOption) (*SavePodResp, error)
	SaveVNode(ctx context.Context, in *EciVNode, opts ...grpc.CallOption) (*SaveVNodeResp, error)
	SendUserNotification(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
}

type eciServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEciServiceClient(cc grpc.ClientConnInterface) EciServiceClient {
	return &eciServiceClient{cc}
}

func (c *eciServiceClient) SavePod(ctx context.Context, in *EciPod, opts ...grpc.CallOption) (*SavePodResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SavePodResp)
	err := c.cc.Invoke(ctx, EciService_SavePod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eciServiceClient) SaveVNode(ctx context.Context, in *EciVNode, opts ...grpc.CallOption) (*SaveVNodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveVNodeResp)
	err := c.cc.Invoke(ctx, EciService_SaveVNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eciServiceClient) SendUserNotification(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, EciService_SendUserNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EciServiceServer is the server API for EciService service.
// All implementations must embed UnimplementedEciServiceServer
// for forward compatibility.
type EciServiceServer interface {
	SavePod(context.Context, *EciPod) (*SavePodResp, error)
	SaveVNode(context.Context, *EciVNode) (*SaveVNodeResp, error)
	SendUserNotification(context.Context, *NotifyRequest) (*NotifyResponse, error)
	mustEmbedUnimplementedEciServiceServer()
}

// UnimplementedEciServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEciServiceServer struct{}

func (UnimplementedEciServiceServer) SavePod(context.Context, *EciPod) (*SavePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePod not implemented")
}
func (UnimplementedEciServiceServer) SaveVNode(context.Context, *EciVNode) (*SaveVNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveVNode not implemented")
}
func (UnimplementedEciServiceServer) SendUserNotification(context.Context, *NotifyRequest) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserNotification not implemented")
}
func (UnimplementedEciServiceServer) mustEmbedUnimplementedEciServiceServer() {}
func (UnimplementedEciServiceServer) testEmbeddedByValue()                    {}

// UnsafeEciServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EciServiceServer will
// result in compilation errors.
type UnsafeEciServiceServer interface {
	mustEmbedUnimplementedEciServiceServer()
}

func RegisterEciServiceServer(s grpc.ServiceRegistrar, srv EciServiceServer) {
	// If the following call pancis, it indicates UnimplementedEciServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EciService_ServiceDesc, srv)
}

func _EciService_SavePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EciPod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EciServiceServer).SavePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EciService_SavePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EciServiceServer).SavePod(ctx, req.(*EciPod))
	}
	return interceptor(ctx, in, info, handler)
}

func _EciService_SaveVNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EciVNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EciServiceServer).SaveVNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EciService_SaveVNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EciServiceServer).SaveVNode(ctx, req.(*EciVNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _EciService_SendUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EciServiceServer).SendUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EciService_SendUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EciServiceServer).SendUserNotification(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EciService_ServiceDesc is the grpc.ServiceDesc for EciService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EciService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pod.EciService",
	HandlerType: (*EciServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePod",
			Handler:    _EciService_SavePod_Handler,
		},
		{
			MethodName: "SaveVNode",
			Handler:    _EciService_SaveVNode_Handler,
		},
		{
			MethodName: "SendUserNotification",
			Handler:    _EciService_SendUserNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pod/v1/pod.proto",
}
