syntax = "proto3";

package agent;

option go_package = "./agent";

import "k8s.io/api/core/v1/generated.proto";

service Agent {
    rpc CreatePod (PodRequest) returns (PodResponse) {}
    rpc UpdatePod (PodRequest) returns (PodResponse) {}
    rpc DeletePod (PodDeleteRequest) returns (PodResponse) {}
    rpc RebootPod (PodRebootRequest) returns (PodResponse) {}
    rpc GetPod (PodInfoRequest) returns (PodInfoResponse) {}
    rpc GetPods (PodInfoRequest) returns (PodInfoResponse) {}
    rpc GetPodStatus (PodInfoRequest) returns (PodInfoResponse) {}
    rpc CheckResourceQuota (PodRequest) returns (QuotaResponse) {}
    rpc GetResourceQuota (QuotaRequest) returns (QuotaStatusResponse) {}
    rpc SetResourceQuota (QuotaRequest) returns (QuotaResponse) {}
    rpc CreateNode (NodeRequest) returns (NodeResponse) {}
    rpc UpdateNode (NodeRequest) returns (NodeResponse) {}
    rpc DeleteNode (NodeRequest) returns (NodeResponse) {}
    rpc GetNodeGpuUsage(NodeGpuUsageRequest) returns (NodeGpuUsageResponse) {}
    rpc GetNodeUsage(NodeUsageRequest) returns (NodeUsageResponse) {}
    rpc CreateWsToken(CreateWsTokenRequest) returns (CreateWsTokenResponse) {}
    rpc GetECIInstances(GetInstanceRequest) returns (GetInstanceResponse) {}
    rpc UpdateFamilySpecInfo(PriceRangeRequest) returns (PriceRangeResponse) {}
    rpc CreateDataCache(DataCacheRequest) returns (DataCacheResponse) {}
    rpc DeleteDataCache (DataCacheRequest) returns (DataCacheResponse) {}
}

enum ActionCode {
    SuccessCode = 0;
    FailCode = -1;
}

enum SpotStrategy {
    NoSpot = 0;
    SpotWithPriceLimit = 1;
    SpotAsPriceGo = 2;
}

message NetworkInfo {
    string ip = 1;
    string vlan = 2;
    string gateway = 3;
}

message Env {
    string key = 1;
    string value = 2;
}

message ConfigMapVolume {
    optional k8s.io.api.core.v1.ConfigMap source = 1;
    optional k8s.io.api.core.v1.ConfigMapVolumeSource volume = 2;
}

message SecretVolume {
    optional k8s.io.api.core.v1.Secret source = 1;
    optional k8s.io.api.core.v1.SecretVolumeSource volume = 2;
}

message Pod {
    string id = 1;
    string containerGroupName = 2;
    NetworkInfo network = 3;
    optional k8s.io.api.core.v1.Pod rawPod = 4;
}

message PodRequest  {
    string gpu_type = 1;
    string cpu_type = 2;
    string customer_id = 3;
    string user_id = 4;
    string restart_policy = 5;
    int64 cpu = 6;
    int64 ram = 7;
    int64 gpu = 8;
    repeated Pod pods = 9;
    int64 temp_store_size = 10;
    string vnode_id = 12;
    repeated k8s.io.api.core.v1.Secret secrets = 13;
    repeated k8s.io.api.core.v1.ConfigMap configMaps = 14;
    string spotStrategy = 15;
    string spotPrice = 16;
}

enum DeleteCode {
    Default = 0;
    SpotFailed = 1;
    SpotDelayed = 2;
    SpotCanceled = 3;
}

message PodDeleteRequest  {
    string vNodeID = 1;
    string name = 2;
    string namespace = 3;
    DeleteCode code   = 4;
}

message PodRebootRequest  {
    string name = 2;
    string namespace = 3;
}

message PodResponse  {
    ActionCode code   = 1;
    string  message   = 2;
}

message Pods {
    NetworkInfo network = 1;
    optional k8s.io.api.core.v1.Pod pod = 2;
}

message PodInfoRequest  {
    string namespace = 1;
    string name = 2;
    string vnode_id = 3;
}

message PodInfoResponse  {
    ActionCode code   = 1;
    string  message   = 2;
    repeated Pods pods = 3;
}

message IpPoolSegments {
    string vlan = 1;
    string subnet = 2;
    string gateway = 3;
    string available_zone_id = 4;
    repeated string start_end = 5;
}

message PrivateNet {
    string vlan = 1;
    string subnet = 2;
    string gateway = 3;
    string ip = 4;
    string eip = 5;
}

message QuantityInfo {
    int64 cpu = 1;
    int64 ram = 2;
    int64 gpu = 3;
    string cpu_type = 4;
    string gpu_type = 5;
    string min_spot_price = 6;
    string max_spot_price = 7;
}

message ProductQuantity {
    repeated QuantityInfo quantity = 1;
}

message NodeQuantity {
    int64 cpu = 1;
    int64 ram = 2;
    int64 gpu = 3;
}

message NodeRequest  {
    string kube_config = 1;
    map<string, IpPoolSegments> ip_pool_segments = 2;
    string customer_id = 3;
    string user_id = 4;
    string id = 5;
    PrivateNet private_net = 6;
    repeated k8s.io.api.core.v1.Taint Taints = 7;
    map<string, string> labels  = 8;
    map<string, ProductQuantity> productQuantity = 9;
    NodeQuantity nodeQuantity = 10;
    string image = 11;
}

message NodeResponse  {
    ActionCode code   = 1;
    string  message   = 2;
}

message NodeGpuUsageRequest{
    repeated string nodeIds=1;
}

message NodeUsageRequest{
}

message NodeGpuUsageResponse{
    ActionCode code   = 1;
    string  message   = 2;
    repeated NodeGpuUsage node_gpu_usage=3;
}

message NodeGpuUsage{
    string nodeId=1;
    string gpuType=2;
    int64 totalGpus=3;
    int64 usedGpus=4;
    repeated string podIds=5;
}

message NodeUsageResponse{
    repeated NodeUsage usage = 1;
}

message UsageInfo {
    int64 gpus = 1;
    int64 cpus = 2;
}

message NodeUsage{
    string Id = 1;
    string gpuType = 2;
    string cpuType = 3;
    UsageInfo totalUsage = 4;
    UsageInfo usedUsage = 5;
    UsageInfo usedSpotPriceLimitUsage = 6;
    UsageInfo usedSpotAsPriceGoUsage = 7;
    string familyId = 8;
    float lowestGPUPricePerUnit = 9;
}

message CreateWsTokenRequest{
    string customer_id=1;
    string user_id=2;
    string pod_name=3;
    string vnode_id=4;
}

message CreateWsTokenResponse{
    ActionCode code = 1;
    string message = 2;
    string token = 3;
}

message QuotaRequest {
    string customerId = 1;
    string userId = 2;
    optional k8s.io.api.core.v1.ResourceQuotaSpec quota = 3;
}

message QuotaStatusResponse {
    optional k8s.io.api.core.v1.ResourceQuotaStatus quota = 1;
}

message QuotaResponse {
    bool result = 1;
    string message = 2;
}

message GetInstanceRequest {
    string customerId = 1;
    string userId = 2;
    repeated string InstanceIds=3;
}

message GetInstanceResponse {
    repeated string InstanceIds=1;
}

message PriceRangeRequest {
    map<string, ProductQuantity> productQuantity = 1;
}

message PriceRangeResponse {
    bool result = 1;
    string message = 2;
}

message DataCacheRequest {
    NetworkInfo network = 1;
    string image = 2;
    DataCacheOptions dest = 3;
    DataCacheOptions source = 4;
    string id = 5;
    string customer_id = 6;
    string user_id = 7;
}

message DataCacheOptions {
    string type = 1;
    string path = 2;
    string url = 3;
    string server = 4;
    string otherOpts = 5;
    string bucket = 6;
    string akId = 7;
    string akSecret = 8;
    string accessToken = 9;
    string repoSource = 10;
    string repoId = 11;
    string revision = 12;
}

message DataCacheResponse  {
    ActionCode code   = 1;
    string  message   = 2;
}

message DataCacheNetworkInfo {
    string ip = 1;
    string vlan = 2;
    string gateway = 3;
    string dns = 4;
}