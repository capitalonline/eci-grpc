syntax = "proto3";

package agent;

option go_package = "./agent";

import "k8s.io/api/core/v1/generated.proto";

service Agent {
    rpc CreatePod (PodRequest) returns (PodResponse) {}
    rpc UpdatePod (PodRequest) returns (PodResponse) {}
    rpc DeletePod (PodDeleteRequest) returns (PodResponse) {}
    rpc GetPod (PodInfoRequest) returns (PodInfoResponse) {}
    rpc GetPods (PodInfoRequest) returns (PodInfoResponse) {}
    rpc GetPodStatus (PodInfoRequest) returns (PodInfoResponse) {}
    rpc CreateNode (NodeRequest) returns (NodeResponse) {}
    rpc UpdateNode (NodeRequest) returns (NodeResponse) {}
    rpc DeleteNode (NodeRequest) returns (NodeResponse) {}
}

enum ActionCode {
    SuccessCode = 0;
    FailCode = -1;
}

message NetworkInfo {
    string ip = 1;
    string vlan = 2;
    string gateway = 3;
}

message Env {
    string key = 1;
    string value = 2;
}

message configData {
    string path = 1;
    string fileContent = 2;
}

message configFileSource {
    repeated configData data = 1;
}

message ConfigMapVolume {
    optional k8s.io.api.core.v1.ConfigMap source = 1;
    optional k8s.io.api.core.v1.ConfigMapVolumeSource volume = 2;
}

message SecretVolume {
    optional k8s.io.api.core.v1.Secret source = 1;
    optional k8s.io.api.core.v1.SecretVolumeSource volume = 2;
}

message PodVolume {
    string name = 1;
    optional k8s.io.api.core.v1.NFSVolumeSource nfs = 2;
    optional k8s.io.api.core.v1.EmptyDirVolumeSource emptyDir = 3;
    SecretVolume secret = 4;
    ConfigMapVolume configMap = 5;
    optional configFileSource configFiles = 6;
}

message Pod {
    string id = 1;
    string name = 2;
    NetworkInfo network = 3;
    optional k8s.io.api.core.v1.PodSpec rawPodSpec = 4;
}

message PodInfoRequest  {
    string namespace = 1;
    string name = 2;
    string vnode_id = 3;
}

message PodRequest  {
    string gpu_type = 1;
    string cpu_type = 2;
    string customer_id = 3;
    string user_id = 4;
    string restart_policy = 5;
    int64 cpu = 6;
    int64 ram = 7;
    int64 gpu = 8;
    repeated Pod pods = 9;
    int64 temp_store_size = 10;
    repeated PodVolume volumes = 11;
    string vnode_id = 12;
    repeated k8s.io.api.core.v1.Secret ImagePullSecrets = 13;
}

message PodDeleteRequest  {
    string customer_id = 1;
    string user_id = 2;
    string id = 3;
    string vnode_id = 4;
    string name = 5;
    string namespace = 6;
}

message PodResponse  {
    ActionCode code   = 1;
    string  message   = 2;
}

message PodInfoResponse  {
    ActionCode code   = 1;
    string  message   = 2;
    repeated k8s.io.api.core.v1.Pod podList = 3;
}

message IpPoolSegments {
    string vlan = 1;
    string subnet = 2;
    string gateway = 3;
    string available_zone_id = 4;
    repeated string start_end = 5;
}

message PrivateNet {
    string vlan = 1;
    string subnet = 2;
    string gateway = 3;
    string ip = 4;
    string eip = 5;
}

message NodeRequest  {
    string kube_config = 1;
    repeated IpPoolSegments ip_pool_segments = 2;
    string customer_id = 3;
    string user_id = 4;
    string id = 5;
    PrivateNet private_net = 6;
    repeated k8s.io.api.core.v1.Taint Taints = 7;
    map<string, string> labels  = 8;
}

message NodeResponse  {
    ActionCode code   = 1;
    string  message   = 2;
}

