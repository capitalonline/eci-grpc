// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: agent.proto

package agent

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionCode int32

const (
	ActionCode_SuccessCode ActionCode = 0
	ActionCode_FailCode    ActionCode = -1
)

// Enum value maps for ActionCode.
var (
	ActionCode_name = map[int32]string{
		0:  "SuccessCode",
		-1: "FailCode",
	}
	ActionCode_value = map[string]int32{
		"SuccessCode": 0,
		"FailCode":    -1,
	}
)

func (x ActionCode) Enum() *ActionCode {
	p := new(ActionCode)
	*p = x
	return p
}

func (x ActionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[0].Descriptor()
}

func (ActionCode) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[0]
}

func (x ActionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionCode.Descriptor instead.
func (ActionCode) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0}
}

type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Vlan    string `protobuf:"bytes,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	mi := &file_agent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetworkInfo) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *NetworkInfo) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type Env struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Env) Reset() {
	*x = Env{}
	mi := &file_agent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Env) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Env) ProtoMessage() {}

func (x *Env) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Env.ProtoReflect.Descriptor instead.
func (*Env) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{1}
}

func (x *Env) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Env) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ConfigMapVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *v1.ConfigMap             `protobuf:"bytes,1,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Volume *v1.ConfigMapVolumeSource `protobuf:"bytes,2,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
}

func (x *ConfigMapVolume) Reset() {
	*x = ConfigMapVolume{}
	mi := &file_agent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigMapVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapVolume) ProtoMessage() {}

func (x *ConfigMapVolume) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapVolume.ProtoReflect.Descriptor instead.
func (*ConfigMapVolume) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigMapVolume) GetSource() *v1.ConfigMap {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ConfigMapVolume) GetVolume() *v1.ConfigMapVolumeSource {
	if x != nil {
		return x.Volume
	}
	return nil
}

type SecretVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *v1.Secret             `protobuf:"bytes,1,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Volume *v1.SecretVolumeSource `protobuf:"bytes,2,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
}

func (x *SecretVolume) Reset() {
	*x = SecretVolume{}
	mi := &file_agent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretVolume) ProtoMessage() {}

func (x *SecretVolume) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretVolume.ProtoReflect.Descriptor instead.
func (*SecretVolume) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{3}
}

func (x *SecretVolume) GetSource() *v1.Secret {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SecretVolume) GetVolume() *v1.SecretVolumeSource {
	if x != nil {
		return x.Volume
	}
	return nil
}

type Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ContainerGroupName string       `protobuf:"bytes,2,opt,name=containerGroupName,proto3" json:"containerGroupName,omitempty"`
	Network            *NetworkInfo `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	RawPod             *v1.Pod      `protobuf:"bytes,4,opt,name=rawPod,proto3,oneof" json:"rawPod,omitempty"`
}

func (x *Pod) Reset() {
	*x = Pod{}
	mi := &file_agent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pod) ProtoMessage() {}

func (x *Pod) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{4}
}

func (x *Pod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pod) GetContainerGroupName() string {
	if x != nil {
		return x.ContainerGroupName
	}
	return ""
}

func (x *Pod) GetNetwork() *NetworkInfo {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Pod) GetRawPod() *v1.Pod {
	if x != nil {
		return x.RawPod
	}
	return nil
}

type PodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuType       string          `protobuf:"bytes,1,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	CpuType       string          `protobuf:"bytes,2,opt,name=cpu_type,json=cpuType,proto3" json:"cpu_type,omitempty"`
	CustomerId    string          `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId        string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RestartPolicy string          `protobuf:"bytes,5,opt,name=restart_policy,json=restartPolicy,proto3" json:"restart_policy,omitempty"`
	Cpu           int64           `protobuf:"varint,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Ram           int64           `protobuf:"varint,7,opt,name=ram,proto3" json:"ram,omitempty"`
	Gpu           int64           `protobuf:"varint,8,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Pods          []*Pod          `protobuf:"bytes,9,rep,name=pods,proto3" json:"pods,omitempty"`
	TempStoreSize int64           `protobuf:"varint,10,opt,name=temp_store_size,json=tempStoreSize,proto3" json:"temp_store_size,omitempty"`
	VnodeId       string          `protobuf:"bytes,12,opt,name=vnode_id,json=vnodeId,proto3" json:"vnode_id,omitempty"`
	Secrets       []*v1.Secret    `protobuf:"bytes,13,rep,name=secrets,proto3" json:"secrets,omitempty"`
	ConfigMaps    []*v1.ConfigMap `protobuf:"bytes,14,rep,name=configMaps,proto3" json:"configMaps,omitempty"`
}

func (x *PodRequest) Reset() {
	*x = PodRequest{}
	mi := &file_agent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodRequest) ProtoMessage() {}

func (x *PodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodRequest.ProtoReflect.Descriptor instead.
func (*PodRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{5}
}

func (x *PodRequest) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *PodRequest) GetCpuType() string {
	if x != nil {
		return x.CpuType
	}
	return ""
}

func (x *PodRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *PodRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PodRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *PodRequest) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *PodRequest) GetRam() int64 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *PodRequest) GetGpu() int64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *PodRequest) GetPods() []*Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *PodRequest) GetTempStoreSize() int64 {
	if x != nil {
		return x.TempStoreSize
	}
	return 0
}

func (x *PodRequest) GetVnodeId() string {
	if x != nil {
		return x.VnodeId
	}
	return ""
}

func (x *PodRequest) GetSecrets() []*v1.Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *PodRequest) GetConfigMaps() []*v1.ConfigMap {
	if x != nil {
		return x.ConfigMaps
	}
	return nil
}

type PodDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VNodeID   string `protobuf:"bytes,1,opt,name=vNodeID,proto3" json:"vNodeID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *PodDeleteRequest) Reset() {
	*x = PodDeleteRequest{}
	mi := &file_agent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodDeleteRequest) ProtoMessage() {}

func (x *PodDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodDeleteRequest.ProtoReflect.Descriptor instead.
func (*PodDeleteRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{6}
}

func (x *PodDeleteRequest) GetVNodeID() string {
	if x != nil {
		return x.VNodeID
	}
	return ""
}

func (x *PodDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodDeleteRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type PodRebootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VNodeID   string `protobuf:"bytes,1,opt,name=vNodeID,proto3" json:"vNodeID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *PodRebootRequest) Reset() {
	*x = PodRebootRequest{}
	mi := &file_agent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodRebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodRebootRequest) ProtoMessage() {}

func (x *PodRebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodRebootRequest.ProtoReflect.Descriptor instead.
func (*PodRebootRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{7}
}

func (x *PodRebootRequest) GetVNodeID() string {
	if x != nil {
		return x.VNodeID
	}
	return ""
}

func (x *PodRebootRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodRebootRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type PodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ActionCode `protobuf:"varint,1,opt,name=code,proto3,enum=agent.ActionCode" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PodResponse) Reset() {
	*x = PodResponse{}
	mi := &file_agent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResponse) ProtoMessage() {}

func (x *PodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResponse.ProtoReflect.Descriptor instead.
func (*PodResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{8}
}

func (x *PodResponse) GetCode() ActionCode {
	if x != nil {
		return x.Code
	}
	return ActionCode_SuccessCode
}

func (x *PodResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Pods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *NetworkInfo `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Pod     *v1.Pod      `protobuf:"bytes,2,opt,name=pod,proto3,oneof" json:"pod,omitempty"`
}

func (x *Pods) Reset() {
	*x = Pods{}
	mi := &file_agent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pods) ProtoMessage() {}

func (x *Pods) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pods.ProtoReflect.Descriptor instead.
func (*Pods) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{9}
}

func (x *Pods) GetNetwork() *NetworkInfo {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Pods) GetPod() *v1.Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

type PodInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VnodeId   string `protobuf:"bytes,3,opt,name=vnode_id,json=vnodeId,proto3" json:"vnode_id,omitempty"`
}

func (x *PodInfoRequest) Reset() {
	*x = PodInfoRequest{}
	mi := &file_agent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodInfoRequest) ProtoMessage() {}

func (x *PodInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodInfoRequest.ProtoReflect.Descriptor instead.
func (*PodInfoRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{10}
}

func (x *PodInfoRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PodInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodInfoRequest) GetVnodeId() string {
	if x != nil {
		return x.VnodeId
	}
	return ""
}

type PodInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ActionCode `protobuf:"varint,1,opt,name=code,proto3,enum=agent.ActionCode" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pods    []*Pods    `protobuf:"bytes,3,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *PodInfoResponse) Reset() {
	*x = PodInfoResponse{}
	mi := &file_agent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodInfoResponse) ProtoMessage() {}

func (x *PodInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodInfoResponse.ProtoReflect.Descriptor instead.
func (*PodInfoResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{11}
}

func (x *PodInfoResponse) GetCode() ActionCode {
	if x != nil {
		return x.Code
	}
	return ActionCode_SuccessCode
}

func (x *PodInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PodInfoResponse) GetPods() []*Pods {
	if x != nil {
		return x.Pods
	}
	return nil
}

type IpPoolSegments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlan            string   `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Subnet          string   `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway         string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	AvailableZoneId string   `protobuf:"bytes,4,opt,name=available_zone_id,json=availableZoneId,proto3" json:"available_zone_id,omitempty"`
	StartEnd        []string `protobuf:"bytes,5,rep,name=start_end,json=startEnd,proto3" json:"start_end,omitempty"`
}

func (x *IpPoolSegments) Reset() {
	*x = IpPoolSegments{}
	mi := &file_agent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpPoolSegments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpPoolSegments) ProtoMessage() {}

func (x *IpPoolSegments) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpPoolSegments.ProtoReflect.Descriptor instead.
func (*IpPoolSegments) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{12}
}

func (x *IpPoolSegments) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *IpPoolSegments) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *IpPoolSegments) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *IpPoolSegments) GetAvailableZoneId() string {
	if x != nil {
		return x.AvailableZoneId
	}
	return ""
}

func (x *IpPoolSegments) GetStartEnd() []string {
	if x != nil {
		return x.StartEnd
	}
	return nil
}

type PrivateNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlan    string `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Subnet  string `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Ip      string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Eip     string `protobuf:"bytes,5,opt,name=eip,proto3" json:"eip,omitempty"`
}

func (x *PrivateNet) Reset() {
	*x = PrivateNet{}
	mi := &file_agent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateNet) ProtoMessage() {}

func (x *PrivateNet) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateNet.ProtoReflect.Descriptor instead.
func (*PrivateNet) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{13}
}

func (x *PrivateNet) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *PrivateNet) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *PrivateNet) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *PrivateNet) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PrivateNet) GetEip() string {
	if x != nil {
		return x.Eip
	}
	return ""
}

type QuantityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu     int64  `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Ram     int64  `protobuf:"varint,2,opt,name=ram,proto3" json:"ram,omitempty"`
	Gpu     int64  `protobuf:"varint,3,opt,name=gpu,proto3" json:"gpu,omitempty"`
	CpuType string `protobuf:"bytes,4,opt,name=cpu_type,json=cpuType,proto3" json:"cpu_type,omitempty"`
	GpuType string `protobuf:"bytes,5,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
}

func (x *QuantityInfo) Reset() {
	*x = QuantityInfo{}
	mi := &file_agent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuantityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityInfo) ProtoMessage() {}

func (x *QuantityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityInfo.ProtoReflect.Descriptor instead.
func (*QuantityInfo) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{14}
}

func (x *QuantityInfo) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *QuantityInfo) GetRam() int64 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *QuantityInfo) GetGpu() int64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *QuantityInfo) GetCpuType() string {
	if x != nil {
		return x.CpuType
	}
	return ""
}

func (x *QuantityInfo) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

type ProductQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity []*QuantityInfo `protobuf:"bytes,1,rep,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ProductQuantity) Reset() {
	*x = ProductQuantity{}
	mi := &file_agent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductQuantity) ProtoMessage() {}

func (x *ProductQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductQuantity.ProtoReflect.Descriptor instead.
func (*ProductQuantity) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{15}
}

func (x *ProductQuantity) GetQuantity() []*QuantityInfo {
	if x != nil {
		return x.Quantity
	}
	return nil
}

type NodeQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu int64 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Ram int64 `protobuf:"varint,2,opt,name=ram,proto3" json:"ram,omitempty"`
	Gpu int64 `protobuf:"varint,3,opt,name=gpu,proto3" json:"gpu,omitempty"`
}

func (x *NodeQuantity) Reset() {
	*x = NodeQuantity{}
	mi := &file_agent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeQuantity) ProtoMessage() {}

func (x *NodeQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeQuantity.ProtoReflect.Descriptor instead.
func (*NodeQuantity) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{16}
}

func (x *NodeQuantity) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *NodeQuantity) GetRam() int64 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *NodeQuantity) GetGpu() int64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

type NodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeConfig      string                      `protobuf:"bytes,1,opt,name=kube_config,json=kubeConfig,proto3" json:"kube_config,omitempty"`
	IpPoolSegments  map[string]*IpPoolSegments  `protobuf:"bytes,2,rep,name=ip_pool_segments,json=ipPoolSegments,proto3" json:"ip_pool_segments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CustomerId      string                      `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId          string                      `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id              string                      `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	PrivateNet      *PrivateNet                 `protobuf:"bytes,6,opt,name=private_net,json=privateNet,proto3" json:"private_net,omitempty"`
	Taints          []*v1.Taint                 `protobuf:"bytes,7,rep,name=Taints,proto3" json:"Taints,omitempty"`
	Labels          map[string]string           `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProductQuantity map[string]*ProductQuantity `protobuf:"bytes,9,rep,name=productQuantity,proto3" json:"productQuantity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeQuantity    *NodeQuantity               `protobuf:"bytes,10,opt,name=nodeQuantity,proto3" json:"nodeQuantity,omitempty"`
	Image           string                      `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *NodeRequest) Reset() {
	*x = NodeRequest{}
	mi := &file_agent_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRequest) ProtoMessage() {}

func (x *NodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRequest.ProtoReflect.Descriptor instead.
func (*NodeRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{17}
}

func (x *NodeRequest) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *NodeRequest) GetIpPoolSegments() map[string]*IpPoolSegments {
	if x != nil {
		return x.IpPoolSegments
	}
	return nil
}

func (x *NodeRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *NodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeRequest) GetPrivateNet() *PrivateNet {
	if x != nil {
		return x.PrivateNet
	}
	return nil
}

func (x *NodeRequest) GetTaints() []*v1.Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *NodeRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeRequest) GetProductQuantity() map[string]*ProductQuantity {
	if x != nil {
		return x.ProductQuantity
	}
	return nil
}

func (x *NodeRequest) GetNodeQuantity() *NodeQuantity {
	if x != nil {
		return x.NodeQuantity
	}
	return nil
}

func (x *NodeRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type NodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ActionCode `protobuf:"varint,1,opt,name=code,proto3,enum=agent.ActionCode" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *NodeResponse) Reset() {
	*x = NodeResponse{}
	mi := &file_agent_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResponse) ProtoMessage() {}

func (x *NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResponse.ProtoReflect.Descriptor instead.
func (*NodeResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{18}
}

func (x *NodeResponse) GetCode() ActionCode {
	if x != nil {
		return x.Code
	}
	return ActionCode_SuccessCode
}

func (x *NodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NodeGpuUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIds []string `protobuf:"bytes,1,rep,name=nodeIds,proto3" json:"nodeIds,omitempty"`
}

func (x *NodeGpuUsageRequest) Reset() {
	*x = NodeGpuUsageRequest{}
	mi := &file_agent_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeGpuUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGpuUsageRequest) ProtoMessage() {}

func (x *NodeGpuUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGpuUsageRequest.ProtoReflect.Descriptor instead.
func (*NodeGpuUsageRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{19}
}

func (x *NodeGpuUsageRequest) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

type NodeGpuUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         ActionCode      `protobuf:"varint,1,opt,name=code,proto3,enum=agent.ActionCode" json:"code,omitempty"`
	Message      string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NodeGpuUsage []*NodeGpuUsage `protobuf:"bytes,3,rep,name=node_gpu_usage,json=nodeGpuUsage,proto3" json:"node_gpu_usage,omitempty"`
}

func (x *NodeGpuUsageResponse) Reset() {
	*x = NodeGpuUsageResponse{}
	mi := &file_agent_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeGpuUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGpuUsageResponse) ProtoMessage() {}

func (x *NodeGpuUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGpuUsageResponse.ProtoReflect.Descriptor instead.
func (*NodeGpuUsageResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{20}
}

func (x *NodeGpuUsageResponse) GetCode() ActionCode {
	if x != nil {
		return x.Code
	}
	return ActionCode_SuccessCode
}

func (x *NodeGpuUsageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NodeGpuUsageResponse) GetNodeGpuUsage() []*NodeGpuUsage {
	if x != nil {
		return x.NodeGpuUsage
	}
	return nil
}

type NodeGpuUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    string   `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	GpuType   string   `protobuf:"bytes,2,opt,name=gpuType,proto3" json:"gpuType,omitempty"`
	TotalGpus int64    `protobuf:"varint,3,opt,name=totalGpus,proto3" json:"totalGpus,omitempty"`
	UsedGpus  int64    `protobuf:"varint,4,opt,name=usedGpus,proto3" json:"usedGpus,omitempty"`
	PodIds    []string `protobuf:"bytes,5,rep,name=podIds,proto3" json:"podIds,omitempty"`
}

func (x *NodeGpuUsage) Reset() {
	*x = NodeGpuUsage{}
	mi := &file_agent_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeGpuUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGpuUsage) ProtoMessage() {}

func (x *NodeGpuUsage) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGpuUsage.ProtoReflect.Descriptor instead.
func (*NodeGpuUsage) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{21}
}

func (x *NodeGpuUsage) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeGpuUsage) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *NodeGpuUsage) GetTotalGpus() int64 {
	if x != nil {
		return x.TotalGpus
	}
	return 0
}

func (x *NodeGpuUsage) GetUsedGpus() int64 {
	if x != nil {
		return x.UsedGpus
	}
	return 0
}

func (x *NodeGpuUsage) GetPodIds() []string {
	if x != nil {
		return x.PodIds
	}
	return nil
}

type CreateWsTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PodName    string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	VnodeId    string `protobuf:"bytes,4,opt,name=vnode_id,json=vnodeId,proto3" json:"vnode_id,omitempty"`
}

func (x *CreateWsTokenRequest) Reset() {
	*x = CreateWsTokenRequest{}
	mi := &file_agent_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWsTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWsTokenRequest) ProtoMessage() {}

func (x *CreateWsTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWsTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateWsTokenRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{22}
}

func (x *CreateWsTokenRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CreateWsTokenRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateWsTokenRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *CreateWsTokenRequest) GetVnodeId() string {
	if x != nil {
		return x.VnodeId
	}
	return ""
}

type CreateWsTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ActionCode `protobuf:"varint,1,opt,name=code,proto3,enum=agent.ActionCode" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token   string     `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateWsTokenResponse) Reset() {
	*x = CreateWsTokenResponse{}
	mi := &file_agent_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWsTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWsTokenResponse) ProtoMessage() {}

func (x *CreateWsTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWsTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateWsTokenResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{23}
}

func (x *CreateWsTokenResponse) GetCode() ActionCode {
	if x != nil {
		return x.Code
	}
	return ActionCode_SuccessCode
}

func (x *CreateWsTokenResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateWsTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_agent_proto protoreflect.FileDescriptor

var file_agent_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x2d, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a,
	0x06, 0x72, 0x61, 0x77, 0x50, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x61, 0x77, 0x50, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x77, 0x50, 0x6f, 0x64, 0x22, 0xb1,
	0x03, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x5e, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x4e, 0x0a, 0x0b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x6c, 0x0a, 0x04, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x64,
	0x22, 0x5d, 0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22,
	0x73, 0x0a, 0x0f, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x49, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x22, 0x74, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x69, 0x70, 0x22, 0x7a, 0x0a, 0x0c,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x61, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67,
	0x70, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x44, 0x0a, 0x0c,
	0x4e, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x61, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67,
	0x70, 0x75, 0x22, 0xfc, 0x05, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x1a, 0x58, 0x0a, 0x13, 0x49, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4f, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x64, 0x47, 0x70, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x64, 0x47, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x34, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x32, 0xea, 0x05, 0x0a,
	0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x64, 0x12, 0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x12, 0x11, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x12,
	0x17, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x09, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x50, 0x6f, 0x64, 0x12, 0x17, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x64, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x73,
	0x12, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_proto_rawDescOnce sync.Once
	file_agent_proto_rawDescData = file_agent_proto_rawDesc
)

func file_agent_proto_rawDescGZIP() []byte {
	file_agent_proto_rawDescOnce.Do(func() {
		file_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_proto_rawDescData)
	})
	return file_agent_proto_rawDescData
}

var file_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_agent_proto_goTypes = []any{
	(ActionCode)(0),                  // 0: agent.ActionCode
	(*NetworkInfo)(nil),              // 1: agent.NetworkInfo
	(*Env)(nil),                      // 2: agent.Env
	(*ConfigMapVolume)(nil),          // 3: agent.ConfigMapVolume
	(*SecretVolume)(nil),             // 4: agent.SecretVolume
	(*Pod)(nil),                      // 5: agent.Pod
	(*PodRequest)(nil),               // 6: agent.PodRequest
	(*PodDeleteRequest)(nil),         // 7: agent.PodDeleteRequest
	(*PodRebootRequest)(nil),         // 8: agent.PodRebootRequest
	(*PodResponse)(nil),              // 9: agent.PodResponse
	(*Pods)(nil),                     // 10: agent.Pods
	(*PodInfoRequest)(nil),           // 11: agent.PodInfoRequest
	(*PodInfoResponse)(nil),          // 12: agent.PodInfoResponse
	(*IpPoolSegments)(nil),           // 13: agent.IpPoolSegments
	(*PrivateNet)(nil),               // 14: agent.PrivateNet
	(*QuantityInfo)(nil),             // 15: agent.QuantityInfo
	(*ProductQuantity)(nil),          // 16: agent.ProductQuantity
	(*NodeQuantity)(nil),             // 17: agent.NodeQuantity
	(*NodeRequest)(nil),              // 18: agent.NodeRequest
	(*NodeResponse)(nil),             // 19: agent.NodeResponse
	(*NodeGpuUsageRequest)(nil),      // 20: agent.NodeGpuUsageRequest
	(*NodeGpuUsageResponse)(nil),     // 21: agent.NodeGpuUsageResponse
	(*NodeGpuUsage)(nil),             // 22: agent.NodeGpuUsage
	(*CreateWsTokenRequest)(nil),     // 23: agent.CreateWsTokenRequest
	(*CreateWsTokenResponse)(nil),    // 24: agent.CreateWsTokenResponse
	nil,                              // 25: agent.NodeRequest.IpPoolSegmentsEntry
	nil,                              // 26: agent.NodeRequest.LabelsEntry
	nil,                              // 27: agent.NodeRequest.ProductQuantityEntry
	(*v1.ConfigMap)(nil),             // 28: k8s.io.api.core.v1.ConfigMap
	(*v1.ConfigMapVolumeSource)(nil), // 29: k8s.io.api.core.v1.ConfigMapVolumeSource
	(*v1.Secret)(nil),                // 30: k8s.io.api.core.v1.Secret
	(*v1.SecretVolumeSource)(nil),    // 31: k8s.io.api.core.v1.SecretVolumeSource
	(*v1.Pod)(nil),                   // 32: k8s.io.api.core.v1.Pod
	(*v1.Taint)(nil),                 // 33: k8s.io.api.core.v1.Taint
}
var file_agent_proto_depIdxs = []int32{
	28, // 0: agent.ConfigMapVolume.source:type_name -> k8s.io.api.core.v1.ConfigMap
	29, // 1: agent.ConfigMapVolume.volume:type_name -> k8s.io.api.core.v1.ConfigMapVolumeSource
	30, // 2: agent.SecretVolume.source:type_name -> k8s.io.api.core.v1.Secret
	31, // 3: agent.SecretVolume.volume:type_name -> k8s.io.api.core.v1.SecretVolumeSource
	1,  // 4: agent.Pod.network:type_name -> agent.NetworkInfo
	32, // 5: agent.Pod.rawPod:type_name -> k8s.io.api.core.v1.Pod
	5,  // 6: agent.PodRequest.pods:type_name -> agent.Pod
	30, // 7: agent.PodRequest.secrets:type_name -> k8s.io.api.core.v1.Secret
	28, // 8: agent.PodRequest.configMaps:type_name -> k8s.io.api.core.v1.ConfigMap
	0,  // 9: agent.PodResponse.code:type_name -> agent.ActionCode
	1,  // 10: agent.Pods.network:type_name -> agent.NetworkInfo
	32, // 11: agent.Pods.pod:type_name -> k8s.io.api.core.v1.Pod
	0,  // 12: agent.PodInfoResponse.code:type_name -> agent.ActionCode
	10, // 13: agent.PodInfoResponse.pods:type_name -> agent.Pods
	15, // 14: agent.ProductQuantity.quantity:type_name -> agent.QuantityInfo
	25, // 15: agent.NodeRequest.ip_pool_segments:type_name -> agent.NodeRequest.IpPoolSegmentsEntry
	14, // 16: agent.NodeRequest.private_net:type_name -> agent.PrivateNet
	33, // 17: agent.NodeRequest.Taints:type_name -> k8s.io.api.core.v1.Taint
	26, // 18: agent.NodeRequest.labels:type_name -> agent.NodeRequest.LabelsEntry
	27, // 19: agent.NodeRequest.productQuantity:type_name -> agent.NodeRequest.ProductQuantityEntry
	17, // 20: agent.NodeRequest.nodeQuantity:type_name -> agent.NodeQuantity
	0,  // 21: agent.NodeResponse.code:type_name -> agent.ActionCode
	0,  // 22: agent.NodeGpuUsageResponse.code:type_name -> agent.ActionCode
	22, // 23: agent.NodeGpuUsageResponse.node_gpu_usage:type_name -> agent.NodeGpuUsage
	0,  // 24: agent.CreateWsTokenResponse.code:type_name -> agent.ActionCode
	13, // 25: agent.NodeRequest.IpPoolSegmentsEntry.value:type_name -> agent.IpPoolSegments
	16, // 26: agent.NodeRequest.ProductQuantityEntry.value:type_name -> agent.ProductQuantity
	6,  // 27: agent.Agent.CreatePod:input_type -> agent.PodRequest
	6,  // 28: agent.Agent.UpdatePod:input_type -> agent.PodRequest
	7,  // 29: agent.Agent.DeletePod:input_type -> agent.PodDeleteRequest
	8,  // 30: agent.Agent.RebootPod:input_type -> agent.PodRebootRequest
	11, // 31: agent.Agent.GetPod:input_type -> agent.PodInfoRequest
	11, // 32: agent.Agent.GetPods:input_type -> agent.PodInfoRequest
	11, // 33: agent.Agent.GetPodStatus:input_type -> agent.PodInfoRequest
	18, // 34: agent.Agent.CreateNode:input_type -> agent.NodeRequest
	18, // 35: agent.Agent.UpdateNode:input_type -> agent.NodeRequest
	18, // 36: agent.Agent.DeleteNode:input_type -> agent.NodeRequest
	20, // 37: agent.Agent.GetNodeGpuUsage:input_type -> agent.NodeGpuUsageRequest
	23, // 38: agent.Agent.CreateWsToken:input_type -> agent.CreateWsTokenRequest
	9,  // 39: agent.Agent.CreatePod:output_type -> agent.PodResponse
	9,  // 40: agent.Agent.UpdatePod:output_type -> agent.PodResponse
	9,  // 41: agent.Agent.DeletePod:output_type -> agent.PodResponse
	9,  // 42: agent.Agent.RebootPod:output_type -> agent.PodResponse
	12, // 43: agent.Agent.GetPod:output_type -> agent.PodInfoResponse
	12, // 44: agent.Agent.GetPods:output_type -> agent.PodInfoResponse
	12, // 45: agent.Agent.GetPodStatus:output_type -> agent.PodInfoResponse
	19, // 46: agent.Agent.CreateNode:output_type -> agent.NodeResponse
	19, // 47: agent.Agent.UpdateNode:output_type -> agent.NodeResponse
	19, // 48: agent.Agent.DeleteNode:output_type -> agent.NodeResponse
	21, // 49: agent.Agent.GetNodeGpuUsage:output_type -> agent.NodeGpuUsageResponse
	24, // 50: agent.Agent.CreateWsToken:output_type -> agent.CreateWsTokenResponse
	39, // [39:51] is the sub-list for method output_type
	27, // [27:39] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_agent_proto_init() }
func file_agent_proto_init() {
	if File_agent_proto != nil {
		return
	}
	file_agent_proto_msgTypes[2].OneofWrappers = []any{}
	file_agent_proto_msgTypes[3].OneofWrappers = []any{}
	file_agent_proto_msgTypes[4].OneofWrappers = []any{}
	file_agent_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_proto_goTypes,
		DependencyIndexes: file_agent_proto_depIdxs,
		EnumInfos:         file_agent_proto_enumTypes,
		MessageInfos:      file_agent_proto_msgTypes,
	}.Build()
	File_agent_proto = out.File
	file_agent_proto_rawDesc = nil
	file_agent_proto_goTypes = nil
	file_agent_proto_depIdxs = nil
}
